import os
import random
import json
from colorama import Fore, Style, init
from constructor import constructor
from data import *
from description import generate_description, edit_text

# Initialize colorama
init()

def clear_console():
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    if os.name == 'nt':
        os.system('cls')

def load_high_score():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ—Ä–¥ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open('high_score.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"score": 0, "day": 0}

def save_high_score(score, day):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ—Ä–¥ –≤ —Ñ–∞–π–ª."""
    with open('high_score.json', 'w') as f:
        json.dump({"score": score, "day": day}, f)

def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã."""
    print(f"{Fore.CYAN}{'='*50}")
    print(f"{Fore.CYAN}üëπ –ò–ì–ù–ê–¢–£–° –ü–†–û–ï–ö–¢ - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–î–ï–†–ñ–ò–ú–´–• üëπ")
    print(f"{Fore.CYAN}{'='*50}{Style.RESET_ALL}\n")

def evaluate_symptoms(shuffled_values: list, real_symptoms: dict, difficulty: str):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∏–º–ø—Ç–æ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    local_score = 0
    max_attempts = 3 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 2 if difficulty == "—Å—Ä–µ–¥–Ω–∏–π" else 1
    
    for symptom in shuffled_values:
        attempts = 0
        while attempts < max_attempts:
            print(f"{Fore.YELLOW}–ï—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–∏–º–ø—Ç–æ–º '{symptom}'?")
            print(f"  1 - –î–∞\n  2 - –ù–µ—Ç{Style.RESET_ALL}")
            answer = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            if answer == '1' or answer == '2':
                break
            else:
                attempts += 1
                if attempts < max_attempts:
                    print(f"{Fore.RED}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {max_attempts - attempts}{Style.RESET_ALL}")
                else:
                    print(f"{Fore.RED}–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–ª–µ–¥—É—é—â–∏–π —Å–∏–º–ø—Ç–æ–º.{Style.RESET_ALL}")
                    break

        if answer == '1' and symptom in real_symptoms:
            local_score += 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1
            print(f"{Fore.GREEN}‚úì –î–∞, —ç—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–∏–º–ø—Ç–æ–º–æ–º.{Style.RESET_ALL}")
        
        elif answer == '2' and symptom not in real_symptoms:
            local_score += 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1
            print(f"{Fore.GREEN}‚úì –í—ã –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏.{Style.RESET_ALL}")
        
        elif answer == '1' and symptom not in real_symptoms:
            local_score -= 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1
            print(f"{Fore.RED}‚úó –í—ã –æ—à–∏–±–ª–∏—Å—å, —ç—Ç–æ–≥–æ —Å–∏–º–ø—Ç–æ–º–∞ —É –Ω–µ–≥–æ –Ω–µ—Ç.{Style.RESET_ALL}")

        elif answer == '2' and symptom in real_symptoms:
            local_score -= 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1
            print(f"{Fore.RED}‚úó –í—ã –æ—à–∏–±–ª–∏—Å—å, —ç—Ç–æ—Ç —Å–∏–º–ø—Ç–æ–º –µ—Å—Ç—å.{Style.RESET_ALL}")       

    return local_score

def get_player_decision():
    while True:
        print(f"\n{Fore.YELLOW}–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:")
        print(f"  1 - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n  2 - –£–±–∏—Ç—å{Style.RESET_ALL}")
        decision = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
        if decision == '1' or decision == '2':
            return decision
        else:
            print(f"{Fore.RED}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.{Style.RESET_ALL}")

def get_difficulty():
    while True:
        print(f"{Fore.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
        print(f"  1 - –õ–µ–≥–∫–∏–π\n  2 - –°—Ä–µ–¥–Ω–∏–π\n  3 - –°–ª–æ–∂–Ω—ã–π{Style.RESET_ALL}")
        difficulty = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
        if difficulty == '1':
            return "–ª–µ–≥–∫–∏–π"
        elif difficulty == '2':
            return "—Å—Ä–µ–¥–Ω–∏–π"
        elif difficulty == '3':
            return "—Å–ª–æ–∂–Ω—ã–π"
        else:
            print(f"{Fore.RED}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.{Style.RESET_ALL}")

def start_game():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã."""
    clear_console()
    print_header()
    
    high_score = load_high_score()
    print(f"{Fore.MAGENTA}–¢–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: {high_score['score']} –æ—á–∫–æ–≤ (–¥–µ–Ω—å {high_score['day']}){Style.RESET_ALL}\n")
    
    difficulty = get_difficulty()
    current_score = 0
    day = 1
    correct_decisions = 0
    total_decisions = 0
    
    while True:
        clear_console()
        print_header()
        print(f"{Fore.CYAN}–î–µ–Ω—å {day} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.capitalize()} | –û—á–∫–∏: {current_score}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}–ü—Ä–æ–ø—É—Å–∫–∞–π –∏–ª–∏ —É–±–∏–≤–∞–π.{Style.RESET_ALL}")

        result = constructor(health)
        description = generate_description(result)
        is_human = result['is_human']

        print(f"\n{Fore.CYAN}–ü–∞—Ü–∏–µ–Ω—Ç:{Style.RESET_ALL}")
        print(result['model'])
        print(f"\n{Fore.CYAN}–û–ø–∏—Å–∞–Ω–∏–µ:{Style.RESET_ALL}")
        print(description)

        really_symptoms = result['random_symptoms']
        real_symptoms = edit_text(really_symptoms)
        random_symptoms = []
        cnt = 3
        while cnt != 0:
            list_symptoms = random.choice(list(symptoms.values()))
            random_symptom = random.choice(list_symptoms)
            
            if random_symptom.startswith("!"):
                x = random_symptom.split("!")[1]
                if x not in real_symptoms:
                    random_symptoms.append(x)
                    cnt -= 1
            else:
                if random_symptom not in real_symptoms:
                    random_symptoms.append(random_symptom)
                    cnt -= 1

        combined_values = real_symptoms + random_symptoms
        shuffled_values = random.sample(combined_values, len(combined_values))
        score = evaluate_symptoms(shuffled_values, real_symptoms, difficulty)
        current_score += score
        decision = get_player_decision()
        total_decisions += 1

        if decision == '1':  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            if is_human:
                print(f"{Fore.GREEN}‚úì –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω.{Style.RESET_ALL}")
                current_score += 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1
                correct_decisions += 1
            else:
                print(f"{Fore.RED}‚úó –í—ã –æ—à–∏–±–ª–∏—Å—å, –≥–æ—Å—Ç—å –ø—Ä–æ–Ω–∏–∫ –≤ –±–æ–ª—å–Ω–∏—Ü—É!{Style.RESET_ALL}")
                current_score -= 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1

        if decision == '2':  # –£–±–∏—Ç—å
            if not is_human:
                print(f"{Fore.GREEN}‚úì –ì–æ—Å—Ç—å –±—ã–ª —É–±–∏—Ç!{Style.RESET_ALL}")
                current_score += 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1
                correct_decisions += 1
            else:
                print(f"{Fore.RED}‚úó –í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –¥–∏–∞–≥–Ω–æ–∑–µ –∏ —É–±–∏–ª–∏ –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ–≥–æ.{Style.RESET_ALL}")
                current_score -= 2 if difficulty == "—Å–ª–æ–∂–Ω—ã–π" else 1

        if day % 7 == 0:
            accuracy = (correct_decisions / total_decisions) * 100
            print(f"\n{Fore.CYAN}=== –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ===")
            print(f"–ë–∞–ª–ª—ã –ò–≥–Ω–∞—Ç–∞ –ú–∏–Ω–∏–±—Ä–æ: {current_score}")
            print(f"–¢–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤: {accuracy:.1f}%")
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {correct_decisions} –∏–∑ {total_decisions}{Style.RESET_ALL}")

            if current_score > high_score['score']:
                print(f"\n{Fore.GREEN}üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! üéâ{Style.RESET_ALL}")
                save_high_score(current_score, day)
                high_score = {"score": current_score, "day": day}

        if input(f"\n{Fore.YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (1 - –î–∞ / 2 - –ù–µ—Ç): {Style.RESET_ALL}").strip() == '2':
            print(f"\n{Fore.CYAN}=== –ò—Ç–æ–≥–∏ –∏–≥—Ä—ã ===")
            print(f"–ë–∞–ª–ª—ã –ò–≥–Ω–∞—Ç–∞ –ú–∏–Ω–∏–±—Ä–æ: {current_score}")
            print(f"–¢–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤: {(correct_decisions / total_decisions) * 100:.1f}%")
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {correct_decisions} –∏–∑ {total_decisions}")
            print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {high_score['score']} –æ—á–∫–æ–≤ (–¥–µ–Ω—å {high_score['day']}){Style.RESET_ALL}")
            break

        day += 1